extends layouts/home_layout

block scripts
  script.
    // Global editor variable
    var editor;

    // Create an object to hold all callbacks by object 
    var callbacks = {
      'newItem' : {
        'onOK' : function onNewItemAdd() {
          console.log("CALLBACK: newItem -> onOK");
          var itemTitle = $('#newItemTitle').val();
          var itemText  = editor.getElement('editor').body.innerHTML; 
          var itemTags  = $('#newItemTags').text();
          $.post('/api/item', {'title':itemTitle, 'text':itemText, 'tags':itemTags}, function() {
            console.log("New item posted");
          });
        },
        'onCancel' : function onNewItemCancel(){
          console.log("CALLBACK: newItem -> onCancel");
          editor.unload();
          $("#newItemAction").show();
          $("#newItem").remove();
        }
      }
    }

    function loadItems(callback)
    {
      $.get('/api/items', function(data, status, xhr) {
        console.log(data.items);
        callback(data.items);
      });
    }

    function ui_setItemField(item_id, field, value)
    {
      var selector = "#"+ item_id +" ." + field;
      $(""+selector).html(value);
    }

    function registerCallbacks()
    {
      // TODO: Think on how to do this: 
      // 1. explicitly 
      // 2. by enumeration of the callbacks object
      // 3. by enumeration of actions in page
      // 4. log the difference between the two
      var actions = $("#newItem").find("[data-type='action']");
      $(actions).each(function() {
        var callback = $(this).data('callback');
        $(this).click(callbacks["newItem"][callback]);
      });
    }

    function renderItems(items)
    {
      for(var i = 0; i < items.length; i++)
      {
        (function(cntr) {
          // TODO: Extract to function -> renderItem, that receives item

          // here the value of i was passed into as the argument cntr
          // and will be captured in this function closure so each
          // iteration of the loop can have it's own value
          var item = items[cntr];
          var item_id = "item_" + item.id;

          console.log("Rendering item: " + item_id);
          
          // Append a wrapper div for new item
          $("#items").append('<div class="item_wrapper" id=' + item_id + '/>')
        
          // Load item skin and set data
          $("#"+item_id).load('/ui/item', function() {
            ui_setItemField(item_id, 'item_title', cnvNlToP(item.value.title));
            ui_setItemField(item_id, 'item_text', cnvNlToP(item.value.text));
            ui_setItemField(item_id, 'item_author', "by " + item.value.author);
          });
        })(i); // bind i value to rendering function
      }
    }

    $( document ).ready(function() {
      $("#newItemAction").click(function() {
        $("#newItemAction").hide();
        $("#newItem").load('/ui/newitem', function() {
          registerCallbacks("newItem");

          // TODO: Consider moving editor loading to some sort of construction code 
          editor = new EpicEditor().load();
        });
      });

      loadItems(renderItems);
    });

block content
  #action_drawer
    
  #home_content   
    #contentTitle(style="margin-top:80px;")
      h2(style="margin:auto auto;float:left;color:#666;") Playing with items
      div(style="clear:both")

    #contentActions(style="height:30px;margin:10px auto")
      a#newItemAction(href="#", style="display:block;float:left")
        img(src="images/add_button.png" style="height:30px;width:30px")
    
    #newItem

    h3(style="margin:auto auto;float:left;color:#666;") Items
    #items(style="float:left;width:800px;height:300px;margin-top:30px")

            